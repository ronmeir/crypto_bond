// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateMachineAndKey.proto

#ifndef PROTOBUF_StateMachineAndKey_2eproto__INCLUDED
#define PROTOBUF_StateMachineAndKey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace StateMachineAndKey {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StateMachineAndKey_2eproto();
void protobuf_AssignDesc_StateMachineAndKey_2eproto();
void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

class Bond;
class StateMachine;
class StateMachine_Transition;
class StateMachine_TransitionsVector;
class SecretKey;

// ===================================================================

class Bond : public ::google::protobuf::Message {
 public:
  Bond();
  virtual ~Bond();

  Bond(const Bond& from);

  inline Bond& operator=(const Bond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bond& default_instance();

  void Swap(Bond* other);

  // implements Message ----------------------------------------------

  Bond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bond& from);
  void MergeFrom(const Bond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Cm = 1;
  inline bool has_cm() const;
  inline void clear_cm();
  static const int kCmFieldNumber = 1;
  inline const ::std::string& cm() const;
  inline void set_cm(const ::std::string& value);
  inline void set_cm(const char* value);
  inline void set_cm(const char* value, size_t size);
  inline ::std::string* mutable_cm();
  inline ::std::string* release_cm();
  inline void set_allocated_cm(::std::string* cm);

  // required string C_start1 = 2;
  inline bool has_c_start1() const;
  inline void clear_c_start1();
  static const int kCStart1FieldNumber = 2;
  inline const ::std::string& c_start1() const;
  inline void set_c_start1(const ::std::string& value);
  inline void set_c_start1(const char* value);
  inline void set_c_start1(const char* value, size_t size);
  inline ::std::string* mutable_c_start1();
  inline ::std::string* release_c_start1();
  inline void set_allocated_c_start1(::std::string* c_start1);

  // required string C_start2 = 3;
  inline bool has_c_start2() const;
  inline void clear_c_start2();
  static const int kCStart2FieldNumber = 3;
  inline const ::std::string& c_start2() const;
  inline void set_c_start2(const ::std::string& value);
  inline void set_c_start2(const char* value);
  inline void set_c_start2(const char* value, size_t size);
  inline ::std::string* mutable_c_start2();
  inline ::std::string* release_c_start2();
  inline void set_allocated_c_start2(::std::string* c_start2);

  // required string C_end1 = 4;
  inline bool has_c_end1() const;
  inline void clear_c_end1();
  static const int kCEnd1FieldNumber = 4;
  inline const ::std::string& c_end1() const;
  inline void set_c_end1(const ::std::string& value);
  inline void set_c_end1(const char* value);
  inline void set_c_end1(const char* value, size_t size);
  inline ::std::string* mutable_c_end1();
  inline ::std::string* release_c_end1();
  inline void set_allocated_c_end1(::std::string* c_end1);

  // required string C_end2 = 5;
  inline bool has_c_end2() const;
  inline void clear_c_end2();
  static const int kCEnd2FieldNumber = 5;
  inline const ::std::string& c_end2() const;
  inline void set_c_end2(const ::std::string& value);
  inline void set_c_end2(const char* value);
  inline void set_c_end2(const char* value, size_t size);
  inline ::std::string* mutable_c_end2();
  inline ::std::string* release_c_end2();
  inline void set_allocated_c_end2(::std::string* c_end2);

  // optional int32 l_numOfCs = 6;
  inline bool has_l_numofcs() const;
  inline void clear_l_numofcs();
  static const int kLNumOfCsFieldNumber = 6;
  inline ::google::protobuf::int32 l_numofcs() const;
  inline void set_l_numofcs(::google::protobuf::int32 value);

  // repeated string c_i_1 = 7;
  inline int c_i_1_size() const;
  inline void clear_c_i_1();
  static const int kCI1FieldNumber = 7;
  inline const ::std::string& c_i_1(int index) const;
  inline ::std::string* mutable_c_i_1(int index);
  inline void set_c_i_1(int index, const ::std::string& value);
  inline void set_c_i_1(int index, const char* value);
  inline void set_c_i_1(int index, const char* value, size_t size);
  inline ::std::string* add_c_i_1();
  inline void add_c_i_1(const ::std::string& value);
  inline void add_c_i_1(const char* value);
  inline void add_c_i_1(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c_i_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c_i_1();

  // repeated string c_i_2 = 8;
  inline int c_i_2_size() const;
  inline void clear_c_i_2();
  static const int kCI2FieldNumber = 8;
  inline const ::std::string& c_i_2(int index) const;
  inline ::std::string* mutable_c_i_2(int index);
  inline void set_c_i_2(int index, const ::std::string& value);
  inline void set_c_i_2(int index, const char* value);
  inline void set_c_i_2(int index, const char* value, size_t size);
  inline ::std::string* add_c_i_2();
  inline void add_c_i_2(const ::std::string& value);
  inline void add_c_i_2(const char* value);
  inline void add_c_i_2(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& c_i_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_c_i_2();

  // @@protoc_insertion_point(class_scope:StateMachineAndKey.Bond)
 private:
  inline void set_has_cm();
  inline void clear_has_cm();
  inline void set_has_c_start1();
  inline void clear_has_c_start1();
  inline void set_has_c_start2();
  inline void clear_has_c_start2();
  inline void set_has_c_end1();
  inline void clear_has_c_end1();
  inline void set_has_c_end2();
  inline void clear_has_c_end2();
  inline void set_has_l_numofcs();
  inline void clear_has_l_numofcs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cm_;
  ::std::string* c_start1_;
  ::std::string* c_start2_;
  ::std::string* c_end1_;
  ::std::string* c_end2_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_i_1_;
  ::google::protobuf::RepeatedPtrField< ::std::string> c_i_2_;
  ::google::protobuf::int32 l_numofcs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachineAndKey_2eproto();
  friend void protobuf_AssignDesc_StateMachineAndKey_2eproto();
  friend void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

  void InitAsDefaultInstance();
  static Bond* default_instance_;
};
// -------------------------------------------------------------------

class StateMachine_Transition : public ::google::protobuf::Message {
 public:
  StateMachine_Transition();
  virtual ~StateMachine_Transition();

  StateMachine_Transition(const StateMachine_Transition& from);

  inline StateMachine_Transition& operator=(const StateMachine_Transition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachine_Transition& default_instance();

  void Swap(StateMachine_Transition* other);

  // implements Message ----------------------------------------------

  StateMachine_Transition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachine_Transition& from);
  void MergeFrom(const StateMachine_Transition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string input = 1;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const char* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // required int32 nextState = 2;
  inline bool has_nextstate() const;
  inline void clear_nextstate();
  static const int kNextStateFieldNumber = 2;
  inline ::google::protobuf::int32 nextstate() const;
  inline void set_nextstate(::google::protobuf::int32 value);

  // required bool IsAcceptanceState = 3;
  inline bool has_isacceptancestate() const;
  inline void clear_isacceptancestate();
  static const int kIsAcceptanceStateFieldNumber = 3;
  inline bool isacceptancestate() const;
  inline void set_isacceptancestate(bool value);

  // @@protoc_insertion_point(class_scope:StateMachineAndKey.StateMachine.Transition)
 private:
  inline void set_has_input();
  inline void clear_has_input();
  inline void set_has_nextstate();
  inline void clear_has_nextstate();
  inline void set_has_isacceptancestate();
  inline void clear_has_isacceptancestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* input_;
  ::google::protobuf::int32 nextstate_;
  bool isacceptancestate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachineAndKey_2eproto();
  friend void protobuf_AssignDesc_StateMachineAndKey_2eproto();
  friend void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

  void InitAsDefaultInstance();
  static StateMachine_Transition* default_instance_;
};
// -------------------------------------------------------------------

class StateMachine_TransitionsVector : public ::google::protobuf::Message {
 public:
  StateMachine_TransitionsVector();
  virtual ~StateMachine_TransitionsVector();

  StateMachine_TransitionsVector(const StateMachine_TransitionsVector& from);

  inline StateMachine_TransitionsVector& operator=(const StateMachine_TransitionsVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachine_TransitionsVector& default_instance();

  void Swap(StateMachine_TransitionsVector* other);

  // implements Message ----------------------------------------------

  StateMachine_TransitionsVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachine_TransitionsVector& from);
  void MergeFrom(const StateMachine_TransitionsVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 numOfStates = 1;
  inline bool has_numofstates() const;
  inline void clear_numofstates();
  static const int kNumOfStatesFieldNumber = 1;
  inline ::google::protobuf::int32 numofstates() const;
  inline void set_numofstates(::google::protobuf::int32 value);

  // repeated int32 amountOfTransPerState = 2;
  inline int amountoftransperstate_size() const;
  inline void clear_amountoftransperstate();
  static const int kAmountOfTransPerStateFieldNumber = 2;
  inline ::google::protobuf::int32 amountoftransperstate(int index) const;
  inline void set_amountoftransperstate(int index, ::google::protobuf::int32 value);
  inline void add_amountoftransperstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      amountoftransperstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_amountoftransperstate();

  // repeated .StateMachineAndKey.StateMachine.Transition trans = 3;
  inline int trans_size() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 3;
  inline const ::StateMachineAndKey::StateMachine_Transition& trans(int index) const;
  inline ::StateMachineAndKey::StateMachine_Transition* mutable_trans(int index);
  inline ::StateMachineAndKey::StateMachine_Transition* add_trans();
  inline const ::google::protobuf::RepeatedPtrField< ::StateMachineAndKey::StateMachine_Transition >&
      trans() const;
  inline ::google::protobuf::RepeatedPtrField< ::StateMachineAndKey::StateMachine_Transition >*
      mutable_trans();

  // @@protoc_insertion_point(class_scope:StateMachineAndKey.StateMachine.TransitionsVector)
 private:
  inline void set_has_numofstates();
  inline void clear_has_numofstates();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > amountoftransperstate_;
  ::google::protobuf::RepeatedPtrField< ::StateMachineAndKey::StateMachine_Transition > trans_;
  ::google::protobuf::int32 numofstates_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachineAndKey_2eproto();
  friend void protobuf_AssignDesc_StateMachineAndKey_2eproto();
  friend void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

  void InitAsDefaultInstance();
  static StateMachine_TransitionsVector* default_instance_;
};
// -------------------------------------------------------------------

class StateMachine : public ::google::protobuf::Message {
 public:
  StateMachine();
  virtual ~StateMachine();

  StateMachine(const StateMachine& from);

  inline StateMachine& operator=(const StateMachine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachine& default_instance();

  void Swap(StateMachine* other);

  // implements Message ----------------------------------------------

  StateMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachine& from);
  void MergeFrom(const StateMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StateMachine_Transition Transition;
  typedef StateMachine_TransitionsVector TransitionsVector;

  // accessors -------------------------------------------------------

  // required .StateMachineAndKey.StateMachine.TransitionsVector transitionsVec = 1;
  inline bool has_transitionsvec() const;
  inline void clear_transitionsvec();
  static const int kTransitionsVecFieldNumber = 1;
  inline const ::StateMachineAndKey::StateMachine_TransitionsVector& transitionsvec() const;
  inline ::StateMachineAndKey::StateMachine_TransitionsVector* mutable_transitionsvec();
  inline ::StateMachineAndKey::StateMachine_TransitionsVector* release_transitionsvec();
  inline void set_allocated_transitionsvec(::StateMachineAndKey::StateMachine_TransitionsVector* transitionsvec);

  // optional string virus = 2;
  inline bool has_virus() const;
  inline void clear_virus();
  static const int kVirusFieldNumber = 2;
  inline const ::std::string& virus() const;
  inline void set_virus(const ::std::string& value);
  inline void set_virus(const char* value);
  inline void set_virus(const char* value, size_t size);
  inline ::std::string* mutable_virus();
  inline ::std::string* release_virus();
  inline void set_allocated_virus(::std::string* virus);

  // @@protoc_insertion_point(class_scope:StateMachineAndKey.StateMachine)
 private:
  inline void set_has_transitionsvec();
  inline void clear_has_transitionsvec();
  inline void set_has_virus();
  inline void clear_has_virus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::StateMachineAndKey::StateMachine_TransitionsVector* transitionsvec_;
  ::std::string* virus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachineAndKey_2eproto();
  friend void protobuf_AssignDesc_StateMachineAndKey_2eproto();
  friend void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

  void InitAsDefaultInstance();
  static StateMachine* default_instance_;
};
// -------------------------------------------------------------------

class SecretKey : public ::google::protobuf::Message {
 public:
  SecretKey();
  virtual ~SecretKey();

  SecretKey(const SecretKey& from);

  inline SecretKey& operator=(const SecretKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecretKey& default_instance();

  void Swap(SecretKey* other);

  // implements Message ----------------------------------------------

  SecretKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SecretKey& from);
  void MergeFrom(const SecretKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string m_K_t_1 = 1;
  inline int m_k_t_1_size() const;
  inline void clear_m_k_t_1();
  static const int kMKT1FieldNumber = 1;
  inline const ::std::string& m_k_t_1(int index) const;
  inline ::std::string* mutable_m_k_t_1(int index);
  inline void set_m_k_t_1(int index, const ::std::string& value);
  inline void set_m_k_t_1(int index, const char* value);
  inline void set_m_k_t_1(int index, const char* value, size_t size);
  inline ::std::string* add_m_k_t_1();
  inline void add_m_k_t_1(const ::std::string& value);
  inline void add_m_k_t_1(const char* value);
  inline void add_m_k_t_1(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_k_t_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_k_t_1();

  // repeated string m_K_t_2 = 2;
  inline int m_k_t_2_size() const;
  inline void clear_m_k_t_2();
  static const int kMKT2FieldNumber = 2;
  inline const ::std::string& m_k_t_2(int index) const;
  inline ::std::string* mutable_m_k_t_2(int index);
  inline void set_m_k_t_2(int index, const ::std::string& value);
  inline void set_m_k_t_2(int index, const char* value);
  inline void set_m_k_t_2(int index, const char* value, size_t size);
  inline ::std::string* add_m_k_t_2();
  inline void add_m_k_t_2(const ::std::string& value);
  inline void add_m_k_t_2(const char* value);
  inline void add_m_k_t_2(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_k_t_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_k_t_2();

  // repeated string m_K_t_3 = 3;
  inline int m_k_t_3_size() const;
  inline void clear_m_k_t_3();
  static const int kMKT3FieldNumber = 3;
  inline const ::std::string& m_k_t_3(int index) const;
  inline ::std::string* mutable_m_k_t_3(int index);
  inline void set_m_k_t_3(int index, const ::std::string& value);
  inline void set_m_k_t_3(int index, const char* value);
  inline void set_m_k_t_3(int index, const char* value, size_t size);
  inline ::std::string* add_m_k_t_3();
  inline void add_m_k_t_3(const ::std::string& value);
  inline void add_m_k_t_3(const char* value);
  inline void add_m_k_t_3(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_k_t_3() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_k_t_3();

  // repeated string m_K_for_q_x_1 = 4;
  inline int m_k_for_q_x_1_size() const;
  inline void clear_m_k_for_q_x_1();
  static const int kMKForQX1FieldNumber = 4;
  inline const ::std::string& m_k_for_q_x_1(int index) const;
  inline ::std::string* mutable_m_k_for_q_x_1(int index);
  inline void set_m_k_for_q_x_1(int index, const ::std::string& value);
  inline void set_m_k_for_q_x_1(int index, const char* value);
  inline void set_m_k_for_q_x_1(int index, const char* value, size_t size);
  inline ::std::string* add_m_k_for_q_x_1();
  inline void add_m_k_for_q_x_1(const ::std::string& value);
  inline void add_m_k_for_q_x_1(const char* value);
  inline void add_m_k_for_q_x_1(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_k_for_q_x_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_k_for_q_x_1();

  // repeated string m_K_for_q_x_2 = 5;
  inline int m_k_for_q_x_2_size() const;
  inline void clear_m_k_for_q_x_2();
  static const int kMKForQX2FieldNumber = 5;
  inline const ::std::string& m_k_for_q_x_2(int index) const;
  inline ::std::string* mutable_m_k_for_q_x_2(int index);
  inline void set_m_k_for_q_x_2(int index, const ::std::string& value);
  inline void set_m_k_for_q_x_2(int index, const char* value);
  inline void set_m_k_for_q_x_2(int index, const char* value, size_t size);
  inline ::std::string* add_m_k_for_q_x_2();
  inline void add_m_k_for_q_x_2(const ::std::string& value);
  inline void add_m_k_for_q_x_2(const char* value);
  inline void add_m_k_for_q_x_2(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_k_for_q_x_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_k_for_q_x_2();

  // required string m_K_start1 = 6;
  inline bool has_m_k_start1() const;
  inline void clear_m_k_start1();
  static const int kMKStart1FieldNumber = 6;
  inline const ::std::string& m_k_start1() const;
  inline void set_m_k_start1(const ::std::string& value);
  inline void set_m_k_start1(const char* value);
  inline void set_m_k_start1(const char* value, size_t size);
  inline ::std::string* mutable_m_k_start1();
  inline ::std::string* release_m_k_start1();
  inline void set_allocated_m_k_start1(::std::string* m_k_start1);

  // required string m_K_start2 = 7;
  inline bool has_m_k_start2() const;
  inline void clear_m_k_start2();
  static const int kMKStart2FieldNumber = 7;
  inline const ::std::string& m_k_start2() const;
  inline void set_m_k_start2(const ::std::string& value);
  inline void set_m_k_start2(const char* value);
  inline void set_m_k_start2(const char* value, size_t size);
  inline ::std::string* mutable_m_k_start2();
  inline ::std::string* release_m_k_start2();
  inline void set_allocated_m_k_start2(::std::string* m_k_start2);

  // @@protoc_insertion_point(class_scope:StateMachineAndKey.SecretKey)
 private:
  inline void set_has_m_k_start1();
  inline void clear_has_m_k_start1();
  inline void set_has_m_k_start2();
  inline void clear_has_m_k_start2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> m_k_t_1_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_k_t_2_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_k_t_3_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_k_for_q_x_1_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_k_for_q_x_2_;
  ::std::string* m_k_start1_;
  ::std::string* m_k_start2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachineAndKey_2eproto();
  friend void protobuf_AssignDesc_StateMachineAndKey_2eproto();
  friend void protobuf_ShutdownFile_StateMachineAndKey_2eproto();

  void InitAsDefaultInstance();
  static SecretKey* default_instance_;
};
// ===================================================================


// ===================================================================

// Bond

// required string Cm = 1;
inline bool Bond::has_cm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bond::set_has_cm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bond::clear_has_cm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bond::clear_cm() {
  if (cm_ != &::google::protobuf::internal::kEmptyString) {
    cm_->clear();
  }
  clear_has_cm();
}
inline const ::std::string& Bond::cm() const {
  return *cm_;
}
inline void Bond::set_cm(const ::std::string& value) {
  set_has_cm();
  if (cm_ == &::google::protobuf::internal::kEmptyString) {
    cm_ = new ::std::string;
  }
  cm_->assign(value);
}
inline void Bond::set_cm(const char* value) {
  set_has_cm();
  if (cm_ == &::google::protobuf::internal::kEmptyString) {
    cm_ = new ::std::string;
  }
  cm_->assign(value);
}
inline void Bond::set_cm(const char* value, size_t size) {
  set_has_cm();
  if (cm_ == &::google::protobuf::internal::kEmptyString) {
    cm_ = new ::std::string;
  }
  cm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::mutable_cm() {
  set_has_cm();
  if (cm_ == &::google::protobuf::internal::kEmptyString) {
    cm_ = new ::std::string;
  }
  return cm_;
}
inline ::std::string* Bond::release_cm() {
  clear_has_cm();
  if (cm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cm_;
    cm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bond::set_allocated_cm(::std::string* cm) {
  if (cm_ != &::google::protobuf::internal::kEmptyString) {
    delete cm_;
  }
  if (cm) {
    set_has_cm();
    cm_ = cm;
  } else {
    clear_has_cm();
    cm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string C_start1 = 2;
inline bool Bond::has_c_start1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bond::set_has_c_start1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bond::clear_has_c_start1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bond::clear_c_start1() {
  if (c_start1_ != &::google::protobuf::internal::kEmptyString) {
    c_start1_->clear();
  }
  clear_has_c_start1();
}
inline const ::std::string& Bond::c_start1() const {
  return *c_start1_;
}
inline void Bond::set_c_start1(const ::std::string& value) {
  set_has_c_start1();
  if (c_start1_ == &::google::protobuf::internal::kEmptyString) {
    c_start1_ = new ::std::string;
  }
  c_start1_->assign(value);
}
inline void Bond::set_c_start1(const char* value) {
  set_has_c_start1();
  if (c_start1_ == &::google::protobuf::internal::kEmptyString) {
    c_start1_ = new ::std::string;
  }
  c_start1_->assign(value);
}
inline void Bond::set_c_start1(const char* value, size_t size) {
  set_has_c_start1();
  if (c_start1_ == &::google::protobuf::internal::kEmptyString) {
    c_start1_ = new ::std::string;
  }
  c_start1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::mutable_c_start1() {
  set_has_c_start1();
  if (c_start1_ == &::google::protobuf::internal::kEmptyString) {
    c_start1_ = new ::std::string;
  }
  return c_start1_;
}
inline ::std::string* Bond::release_c_start1() {
  clear_has_c_start1();
  if (c_start1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = c_start1_;
    c_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bond::set_allocated_c_start1(::std::string* c_start1) {
  if (c_start1_ != &::google::protobuf::internal::kEmptyString) {
    delete c_start1_;
  }
  if (c_start1) {
    set_has_c_start1();
    c_start1_ = c_start1;
  } else {
    clear_has_c_start1();
    c_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string C_start2 = 3;
inline bool Bond::has_c_start2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bond::set_has_c_start2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bond::clear_has_c_start2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bond::clear_c_start2() {
  if (c_start2_ != &::google::protobuf::internal::kEmptyString) {
    c_start2_->clear();
  }
  clear_has_c_start2();
}
inline const ::std::string& Bond::c_start2() const {
  return *c_start2_;
}
inline void Bond::set_c_start2(const ::std::string& value) {
  set_has_c_start2();
  if (c_start2_ == &::google::protobuf::internal::kEmptyString) {
    c_start2_ = new ::std::string;
  }
  c_start2_->assign(value);
}
inline void Bond::set_c_start2(const char* value) {
  set_has_c_start2();
  if (c_start2_ == &::google::protobuf::internal::kEmptyString) {
    c_start2_ = new ::std::string;
  }
  c_start2_->assign(value);
}
inline void Bond::set_c_start2(const char* value, size_t size) {
  set_has_c_start2();
  if (c_start2_ == &::google::protobuf::internal::kEmptyString) {
    c_start2_ = new ::std::string;
  }
  c_start2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::mutable_c_start2() {
  set_has_c_start2();
  if (c_start2_ == &::google::protobuf::internal::kEmptyString) {
    c_start2_ = new ::std::string;
  }
  return c_start2_;
}
inline ::std::string* Bond::release_c_start2() {
  clear_has_c_start2();
  if (c_start2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = c_start2_;
    c_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bond::set_allocated_c_start2(::std::string* c_start2) {
  if (c_start2_ != &::google::protobuf::internal::kEmptyString) {
    delete c_start2_;
  }
  if (c_start2) {
    set_has_c_start2();
    c_start2_ = c_start2;
  } else {
    clear_has_c_start2();
    c_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string C_end1 = 4;
inline bool Bond::has_c_end1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bond::set_has_c_end1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bond::clear_has_c_end1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bond::clear_c_end1() {
  if (c_end1_ != &::google::protobuf::internal::kEmptyString) {
    c_end1_->clear();
  }
  clear_has_c_end1();
}
inline const ::std::string& Bond::c_end1() const {
  return *c_end1_;
}
inline void Bond::set_c_end1(const ::std::string& value) {
  set_has_c_end1();
  if (c_end1_ == &::google::protobuf::internal::kEmptyString) {
    c_end1_ = new ::std::string;
  }
  c_end1_->assign(value);
}
inline void Bond::set_c_end1(const char* value) {
  set_has_c_end1();
  if (c_end1_ == &::google::protobuf::internal::kEmptyString) {
    c_end1_ = new ::std::string;
  }
  c_end1_->assign(value);
}
inline void Bond::set_c_end1(const char* value, size_t size) {
  set_has_c_end1();
  if (c_end1_ == &::google::protobuf::internal::kEmptyString) {
    c_end1_ = new ::std::string;
  }
  c_end1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::mutable_c_end1() {
  set_has_c_end1();
  if (c_end1_ == &::google::protobuf::internal::kEmptyString) {
    c_end1_ = new ::std::string;
  }
  return c_end1_;
}
inline ::std::string* Bond::release_c_end1() {
  clear_has_c_end1();
  if (c_end1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = c_end1_;
    c_end1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bond::set_allocated_c_end1(::std::string* c_end1) {
  if (c_end1_ != &::google::protobuf::internal::kEmptyString) {
    delete c_end1_;
  }
  if (c_end1) {
    set_has_c_end1();
    c_end1_ = c_end1;
  } else {
    clear_has_c_end1();
    c_end1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string C_end2 = 5;
inline bool Bond::has_c_end2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bond::set_has_c_end2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bond::clear_has_c_end2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bond::clear_c_end2() {
  if (c_end2_ != &::google::protobuf::internal::kEmptyString) {
    c_end2_->clear();
  }
  clear_has_c_end2();
}
inline const ::std::string& Bond::c_end2() const {
  return *c_end2_;
}
inline void Bond::set_c_end2(const ::std::string& value) {
  set_has_c_end2();
  if (c_end2_ == &::google::protobuf::internal::kEmptyString) {
    c_end2_ = new ::std::string;
  }
  c_end2_->assign(value);
}
inline void Bond::set_c_end2(const char* value) {
  set_has_c_end2();
  if (c_end2_ == &::google::protobuf::internal::kEmptyString) {
    c_end2_ = new ::std::string;
  }
  c_end2_->assign(value);
}
inline void Bond::set_c_end2(const char* value, size_t size) {
  set_has_c_end2();
  if (c_end2_ == &::google::protobuf::internal::kEmptyString) {
    c_end2_ = new ::std::string;
  }
  c_end2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::mutable_c_end2() {
  set_has_c_end2();
  if (c_end2_ == &::google::protobuf::internal::kEmptyString) {
    c_end2_ = new ::std::string;
  }
  return c_end2_;
}
inline ::std::string* Bond::release_c_end2() {
  clear_has_c_end2();
  if (c_end2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = c_end2_;
    c_end2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bond::set_allocated_c_end2(::std::string* c_end2) {
  if (c_end2_ != &::google::protobuf::internal::kEmptyString) {
    delete c_end2_;
  }
  if (c_end2) {
    set_has_c_end2();
    c_end2_ = c_end2;
  } else {
    clear_has_c_end2();
    c_end2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 l_numOfCs = 6;
inline bool Bond::has_l_numofcs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bond::set_has_l_numofcs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bond::clear_has_l_numofcs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bond::clear_l_numofcs() {
  l_numofcs_ = 0;
  clear_has_l_numofcs();
}
inline ::google::protobuf::int32 Bond::l_numofcs() const {
  return l_numofcs_;
}
inline void Bond::set_l_numofcs(::google::protobuf::int32 value) {
  set_has_l_numofcs();
  l_numofcs_ = value;
}

// repeated string c_i_1 = 7;
inline int Bond::c_i_1_size() const {
  return c_i_1_.size();
}
inline void Bond::clear_c_i_1() {
  c_i_1_.Clear();
}
inline const ::std::string& Bond::c_i_1(int index) const {
  return c_i_1_.Get(index);
}
inline ::std::string* Bond::mutable_c_i_1(int index) {
  return c_i_1_.Mutable(index);
}
inline void Bond::set_c_i_1(int index, const ::std::string& value) {
  c_i_1_.Mutable(index)->assign(value);
}
inline void Bond::set_c_i_1(int index, const char* value) {
  c_i_1_.Mutable(index)->assign(value);
}
inline void Bond::set_c_i_1(int index, const char* value, size_t size) {
  c_i_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::add_c_i_1() {
  return c_i_1_.Add();
}
inline void Bond::add_c_i_1(const ::std::string& value) {
  c_i_1_.Add()->assign(value);
}
inline void Bond::add_c_i_1(const char* value) {
  c_i_1_.Add()->assign(value);
}
inline void Bond::add_c_i_1(const char* value, size_t size) {
  c_i_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Bond::c_i_1() const {
  return c_i_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Bond::mutable_c_i_1() {
  return &c_i_1_;
}

// repeated string c_i_2 = 8;
inline int Bond::c_i_2_size() const {
  return c_i_2_.size();
}
inline void Bond::clear_c_i_2() {
  c_i_2_.Clear();
}
inline const ::std::string& Bond::c_i_2(int index) const {
  return c_i_2_.Get(index);
}
inline ::std::string* Bond::mutable_c_i_2(int index) {
  return c_i_2_.Mutable(index);
}
inline void Bond::set_c_i_2(int index, const ::std::string& value) {
  c_i_2_.Mutable(index)->assign(value);
}
inline void Bond::set_c_i_2(int index, const char* value) {
  c_i_2_.Mutable(index)->assign(value);
}
inline void Bond::set_c_i_2(int index, const char* value, size_t size) {
  c_i_2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bond::add_c_i_2() {
  return c_i_2_.Add();
}
inline void Bond::add_c_i_2(const ::std::string& value) {
  c_i_2_.Add()->assign(value);
}
inline void Bond::add_c_i_2(const char* value) {
  c_i_2_.Add()->assign(value);
}
inline void Bond::add_c_i_2(const char* value, size_t size) {
  c_i_2_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Bond::c_i_2() const {
  return c_i_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Bond::mutable_c_i_2() {
  return &c_i_2_;
}

// -------------------------------------------------------------------

// StateMachine_Transition

// required string input = 1;
inline bool StateMachine_Transition::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachine_Transition::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachine_Transition::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachine_Transition::clear_input() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& StateMachine_Transition::input() const {
  return *input_;
}
inline void StateMachine_Transition::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void StateMachine_Transition::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(value);
}
inline void StateMachine_Transition::set_input(const char* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine_Transition::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    input_ = new ::std::string;
  }
  return input_;
}
inline ::std::string* StateMachine_Transition::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine_Transition::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 nextState = 2;
inline bool StateMachine_Transition::has_nextstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateMachine_Transition::set_has_nextstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateMachine_Transition::clear_has_nextstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateMachine_Transition::clear_nextstate() {
  nextstate_ = 0;
  clear_has_nextstate();
}
inline ::google::protobuf::int32 StateMachine_Transition::nextstate() const {
  return nextstate_;
}
inline void StateMachine_Transition::set_nextstate(::google::protobuf::int32 value) {
  set_has_nextstate();
  nextstate_ = value;
}

// required bool IsAcceptanceState = 3;
inline bool StateMachine_Transition::has_isacceptancestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateMachine_Transition::set_has_isacceptancestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateMachine_Transition::clear_has_isacceptancestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateMachine_Transition::clear_isacceptancestate() {
  isacceptancestate_ = false;
  clear_has_isacceptancestate();
}
inline bool StateMachine_Transition::isacceptancestate() const {
  return isacceptancestate_;
}
inline void StateMachine_Transition::set_isacceptancestate(bool value) {
  set_has_isacceptancestate();
  isacceptancestate_ = value;
}

// -------------------------------------------------------------------

// StateMachine_TransitionsVector

// required int32 numOfStates = 1;
inline bool StateMachine_TransitionsVector::has_numofstates() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachine_TransitionsVector::set_has_numofstates() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachine_TransitionsVector::clear_has_numofstates() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachine_TransitionsVector::clear_numofstates() {
  numofstates_ = 0;
  clear_has_numofstates();
}
inline ::google::protobuf::int32 StateMachine_TransitionsVector::numofstates() const {
  return numofstates_;
}
inline void StateMachine_TransitionsVector::set_numofstates(::google::protobuf::int32 value) {
  set_has_numofstates();
  numofstates_ = value;
}

// repeated int32 amountOfTransPerState = 2;
inline int StateMachine_TransitionsVector::amountoftransperstate_size() const {
  return amountoftransperstate_.size();
}
inline void StateMachine_TransitionsVector::clear_amountoftransperstate() {
  amountoftransperstate_.Clear();
}
inline ::google::protobuf::int32 StateMachine_TransitionsVector::amountoftransperstate(int index) const {
  return amountoftransperstate_.Get(index);
}
inline void StateMachine_TransitionsVector::set_amountoftransperstate(int index, ::google::protobuf::int32 value) {
  amountoftransperstate_.Set(index, value);
}
inline void StateMachine_TransitionsVector::add_amountoftransperstate(::google::protobuf::int32 value) {
  amountoftransperstate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StateMachine_TransitionsVector::amountoftransperstate() const {
  return amountoftransperstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StateMachine_TransitionsVector::mutable_amountoftransperstate() {
  return &amountoftransperstate_;
}

// repeated .StateMachineAndKey.StateMachine.Transition trans = 3;
inline int StateMachine_TransitionsVector::trans_size() const {
  return trans_.size();
}
inline void StateMachine_TransitionsVector::clear_trans() {
  trans_.Clear();
}
inline const ::StateMachineAndKey::StateMachine_Transition& StateMachine_TransitionsVector::trans(int index) const {
  return trans_.Get(index);
}
inline ::StateMachineAndKey::StateMachine_Transition* StateMachine_TransitionsVector::mutable_trans(int index) {
  return trans_.Mutable(index);
}
inline ::StateMachineAndKey::StateMachine_Transition* StateMachine_TransitionsVector::add_trans() {
  return trans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StateMachineAndKey::StateMachine_Transition >&
StateMachine_TransitionsVector::trans() const {
  return trans_;
}
inline ::google::protobuf::RepeatedPtrField< ::StateMachineAndKey::StateMachine_Transition >*
StateMachine_TransitionsVector::mutable_trans() {
  return &trans_;
}

// -------------------------------------------------------------------

// StateMachine

// required .StateMachineAndKey.StateMachine.TransitionsVector transitionsVec = 1;
inline bool StateMachine::has_transitionsvec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachine::set_has_transitionsvec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachine::clear_has_transitionsvec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachine::clear_transitionsvec() {
  if (transitionsvec_ != NULL) transitionsvec_->::StateMachineAndKey::StateMachine_TransitionsVector::Clear();
  clear_has_transitionsvec();
}
inline const ::StateMachineAndKey::StateMachine_TransitionsVector& StateMachine::transitionsvec() const {
  return transitionsvec_ != NULL ? *transitionsvec_ : *default_instance_->transitionsvec_;
}
inline ::StateMachineAndKey::StateMachine_TransitionsVector* StateMachine::mutable_transitionsvec() {
  set_has_transitionsvec();
  if (transitionsvec_ == NULL) transitionsvec_ = new ::StateMachineAndKey::StateMachine_TransitionsVector;
  return transitionsvec_;
}
inline ::StateMachineAndKey::StateMachine_TransitionsVector* StateMachine::release_transitionsvec() {
  clear_has_transitionsvec();
  ::StateMachineAndKey::StateMachine_TransitionsVector* temp = transitionsvec_;
  transitionsvec_ = NULL;
  return temp;
}
inline void StateMachine::set_allocated_transitionsvec(::StateMachineAndKey::StateMachine_TransitionsVector* transitionsvec) {
  delete transitionsvec_;
  transitionsvec_ = transitionsvec;
  if (transitionsvec) {
    set_has_transitionsvec();
  } else {
    clear_has_transitionsvec();
  }
}

// optional string virus = 2;
inline bool StateMachine::has_virus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateMachine::set_has_virus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateMachine::clear_has_virus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateMachine::clear_virus() {
  if (virus_ != &::google::protobuf::internal::kEmptyString) {
    virus_->clear();
  }
  clear_has_virus();
}
inline const ::std::string& StateMachine::virus() const {
  return *virus_;
}
inline void StateMachine::set_virus(const ::std::string& value) {
  set_has_virus();
  if (virus_ == &::google::protobuf::internal::kEmptyString) {
    virus_ = new ::std::string;
  }
  virus_->assign(value);
}
inline void StateMachine::set_virus(const char* value) {
  set_has_virus();
  if (virus_ == &::google::protobuf::internal::kEmptyString) {
    virus_ = new ::std::string;
  }
  virus_->assign(value);
}
inline void StateMachine::set_virus(const char* value, size_t size) {
  set_has_virus();
  if (virus_ == &::google::protobuf::internal::kEmptyString) {
    virus_ = new ::std::string;
  }
  virus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_virus() {
  set_has_virus();
  if (virus_ == &::google::protobuf::internal::kEmptyString) {
    virus_ = new ::std::string;
  }
  return virus_;
}
inline ::std::string* StateMachine::release_virus() {
  clear_has_virus();
  if (virus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = virus_;
    virus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_virus(::std::string* virus) {
  if (virus_ != &::google::protobuf::internal::kEmptyString) {
    delete virus_;
  }
  if (virus) {
    set_has_virus();
    virus_ = virus;
  } else {
    clear_has_virus();
    virus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SecretKey

// repeated string m_K_t_1 = 1;
inline int SecretKey::m_k_t_1_size() const {
  return m_k_t_1_.size();
}
inline void SecretKey::clear_m_k_t_1() {
  m_k_t_1_.Clear();
}
inline const ::std::string& SecretKey::m_k_t_1(int index) const {
  return m_k_t_1_.Get(index);
}
inline ::std::string* SecretKey::mutable_m_k_t_1(int index) {
  return m_k_t_1_.Mutable(index);
}
inline void SecretKey::set_m_k_t_1(int index, const ::std::string& value) {
  m_k_t_1_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_1(int index, const char* value) {
  m_k_t_1_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_1(int index, const char* value, size_t size) {
  m_k_t_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::add_m_k_t_1() {
  return m_k_t_1_.Add();
}
inline void SecretKey::add_m_k_t_1(const ::std::string& value) {
  m_k_t_1_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_1(const char* value) {
  m_k_t_1_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_1(const char* value, size_t size) {
  m_k_t_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SecretKey::m_k_t_1() const {
  return m_k_t_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SecretKey::mutable_m_k_t_1() {
  return &m_k_t_1_;
}

// repeated string m_K_t_2 = 2;
inline int SecretKey::m_k_t_2_size() const {
  return m_k_t_2_.size();
}
inline void SecretKey::clear_m_k_t_2() {
  m_k_t_2_.Clear();
}
inline const ::std::string& SecretKey::m_k_t_2(int index) const {
  return m_k_t_2_.Get(index);
}
inline ::std::string* SecretKey::mutable_m_k_t_2(int index) {
  return m_k_t_2_.Mutable(index);
}
inline void SecretKey::set_m_k_t_2(int index, const ::std::string& value) {
  m_k_t_2_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_2(int index, const char* value) {
  m_k_t_2_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_2(int index, const char* value, size_t size) {
  m_k_t_2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::add_m_k_t_2() {
  return m_k_t_2_.Add();
}
inline void SecretKey::add_m_k_t_2(const ::std::string& value) {
  m_k_t_2_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_2(const char* value) {
  m_k_t_2_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_2(const char* value, size_t size) {
  m_k_t_2_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SecretKey::m_k_t_2() const {
  return m_k_t_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SecretKey::mutable_m_k_t_2() {
  return &m_k_t_2_;
}

// repeated string m_K_t_3 = 3;
inline int SecretKey::m_k_t_3_size() const {
  return m_k_t_3_.size();
}
inline void SecretKey::clear_m_k_t_3() {
  m_k_t_3_.Clear();
}
inline const ::std::string& SecretKey::m_k_t_3(int index) const {
  return m_k_t_3_.Get(index);
}
inline ::std::string* SecretKey::mutable_m_k_t_3(int index) {
  return m_k_t_3_.Mutable(index);
}
inline void SecretKey::set_m_k_t_3(int index, const ::std::string& value) {
  m_k_t_3_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_3(int index, const char* value) {
  m_k_t_3_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_t_3(int index, const char* value, size_t size) {
  m_k_t_3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::add_m_k_t_3() {
  return m_k_t_3_.Add();
}
inline void SecretKey::add_m_k_t_3(const ::std::string& value) {
  m_k_t_3_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_3(const char* value) {
  m_k_t_3_.Add()->assign(value);
}
inline void SecretKey::add_m_k_t_3(const char* value, size_t size) {
  m_k_t_3_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SecretKey::m_k_t_3() const {
  return m_k_t_3_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SecretKey::mutable_m_k_t_3() {
  return &m_k_t_3_;
}

// repeated string m_K_for_q_x_1 = 4;
inline int SecretKey::m_k_for_q_x_1_size() const {
  return m_k_for_q_x_1_.size();
}
inline void SecretKey::clear_m_k_for_q_x_1() {
  m_k_for_q_x_1_.Clear();
}
inline const ::std::string& SecretKey::m_k_for_q_x_1(int index) const {
  return m_k_for_q_x_1_.Get(index);
}
inline ::std::string* SecretKey::mutable_m_k_for_q_x_1(int index) {
  return m_k_for_q_x_1_.Mutable(index);
}
inline void SecretKey::set_m_k_for_q_x_1(int index, const ::std::string& value) {
  m_k_for_q_x_1_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_for_q_x_1(int index, const char* value) {
  m_k_for_q_x_1_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_for_q_x_1(int index, const char* value, size_t size) {
  m_k_for_q_x_1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::add_m_k_for_q_x_1() {
  return m_k_for_q_x_1_.Add();
}
inline void SecretKey::add_m_k_for_q_x_1(const ::std::string& value) {
  m_k_for_q_x_1_.Add()->assign(value);
}
inline void SecretKey::add_m_k_for_q_x_1(const char* value) {
  m_k_for_q_x_1_.Add()->assign(value);
}
inline void SecretKey::add_m_k_for_q_x_1(const char* value, size_t size) {
  m_k_for_q_x_1_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SecretKey::m_k_for_q_x_1() const {
  return m_k_for_q_x_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SecretKey::mutable_m_k_for_q_x_1() {
  return &m_k_for_q_x_1_;
}

// repeated string m_K_for_q_x_2 = 5;
inline int SecretKey::m_k_for_q_x_2_size() const {
  return m_k_for_q_x_2_.size();
}
inline void SecretKey::clear_m_k_for_q_x_2() {
  m_k_for_q_x_2_.Clear();
}
inline const ::std::string& SecretKey::m_k_for_q_x_2(int index) const {
  return m_k_for_q_x_2_.Get(index);
}
inline ::std::string* SecretKey::mutable_m_k_for_q_x_2(int index) {
  return m_k_for_q_x_2_.Mutable(index);
}
inline void SecretKey::set_m_k_for_q_x_2(int index, const ::std::string& value) {
  m_k_for_q_x_2_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_for_q_x_2(int index, const char* value) {
  m_k_for_q_x_2_.Mutable(index)->assign(value);
}
inline void SecretKey::set_m_k_for_q_x_2(int index, const char* value, size_t size) {
  m_k_for_q_x_2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::add_m_k_for_q_x_2() {
  return m_k_for_q_x_2_.Add();
}
inline void SecretKey::add_m_k_for_q_x_2(const ::std::string& value) {
  m_k_for_q_x_2_.Add()->assign(value);
}
inline void SecretKey::add_m_k_for_q_x_2(const char* value) {
  m_k_for_q_x_2_.Add()->assign(value);
}
inline void SecretKey::add_m_k_for_q_x_2(const char* value, size_t size) {
  m_k_for_q_x_2_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SecretKey::m_k_for_q_x_2() const {
  return m_k_for_q_x_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SecretKey::mutable_m_k_for_q_x_2() {
  return &m_k_for_q_x_2_;
}

// required string m_K_start1 = 6;
inline bool SecretKey::has_m_k_start1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecretKey::set_has_m_k_start1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecretKey::clear_has_m_k_start1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecretKey::clear_m_k_start1() {
  if (m_k_start1_ != &::google::protobuf::internal::kEmptyString) {
    m_k_start1_->clear();
  }
  clear_has_m_k_start1();
}
inline const ::std::string& SecretKey::m_k_start1() const {
  return *m_k_start1_;
}
inline void SecretKey::set_m_k_start1(const ::std::string& value) {
  set_has_m_k_start1();
  if (m_k_start1_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start1_ = new ::std::string;
  }
  m_k_start1_->assign(value);
}
inline void SecretKey::set_m_k_start1(const char* value) {
  set_has_m_k_start1();
  if (m_k_start1_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start1_ = new ::std::string;
  }
  m_k_start1_->assign(value);
}
inline void SecretKey::set_m_k_start1(const char* value, size_t size) {
  set_has_m_k_start1();
  if (m_k_start1_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start1_ = new ::std::string;
  }
  m_k_start1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::mutable_m_k_start1() {
  set_has_m_k_start1();
  if (m_k_start1_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start1_ = new ::std::string;
  }
  return m_k_start1_;
}
inline ::std::string* SecretKey::release_m_k_start1() {
  clear_has_m_k_start1();
  if (m_k_start1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_k_start1_;
    m_k_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SecretKey::set_allocated_m_k_start1(::std::string* m_k_start1) {
  if (m_k_start1_ != &::google::protobuf::internal::kEmptyString) {
    delete m_k_start1_;
  }
  if (m_k_start1) {
    set_has_m_k_start1();
    m_k_start1_ = m_k_start1;
  } else {
    clear_has_m_k_start1();
    m_k_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string m_K_start2 = 7;
inline bool SecretKey::has_m_k_start2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecretKey::set_has_m_k_start2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SecretKey::clear_has_m_k_start2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SecretKey::clear_m_k_start2() {
  if (m_k_start2_ != &::google::protobuf::internal::kEmptyString) {
    m_k_start2_->clear();
  }
  clear_has_m_k_start2();
}
inline const ::std::string& SecretKey::m_k_start2() const {
  return *m_k_start2_;
}
inline void SecretKey::set_m_k_start2(const ::std::string& value) {
  set_has_m_k_start2();
  if (m_k_start2_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start2_ = new ::std::string;
  }
  m_k_start2_->assign(value);
}
inline void SecretKey::set_m_k_start2(const char* value) {
  set_has_m_k_start2();
  if (m_k_start2_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start2_ = new ::std::string;
  }
  m_k_start2_->assign(value);
}
inline void SecretKey::set_m_k_start2(const char* value, size_t size) {
  set_has_m_k_start2();
  if (m_k_start2_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start2_ = new ::std::string;
  }
  m_k_start2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SecretKey::mutable_m_k_start2() {
  set_has_m_k_start2();
  if (m_k_start2_ == &::google::protobuf::internal::kEmptyString) {
    m_k_start2_ = new ::std::string;
  }
  return m_k_start2_;
}
inline ::std::string* SecretKey::release_m_k_start2() {
  clear_has_m_k_start2();
  if (m_k_start2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_k_start2_;
    m_k_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SecretKey::set_allocated_m_k_start2(::std::string* m_k_start2) {
  if (m_k_start2_ != &::google::protobuf::internal::kEmptyString) {
    delete m_k_start2_;
  }
  if (m_k_start2) {
    set_has_m_k_start2();
    m_k_start2_ = m_k_start2;
  } else {
    clear_has_m_k_start2();
    m_k_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StateMachineAndKey

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StateMachineAndKey_2eproto__INCLUDED
