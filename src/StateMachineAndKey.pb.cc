// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateMachineAndKey.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StateMachineAndKey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StateMachineAndKey {

namespace {

const ::google::protobuf::Descriptor* Bond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bond_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachine_Transition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachine_Transition_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachine_State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachine_State_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecretKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretKey_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StateMachineAndKey_2eproto() {
  protobuf_AddDesc_StateMachineAndKey_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StateMachineAndKey.proto");
  GOOGLE_CHECK(file != NULL);
  Bond_descriptor_ = file->message_type(0);
  static const int Bond_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_i_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_i_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_start1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_start2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_end1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, c_end2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, l_numofcs_),
  };
  Bond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bond_descriptor_,
      Bond::default_instance_,
      Bond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bond));
  StateMachine_descriptor_ = file->message_type(1);
  static const int StateMachine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, statevec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, virus_),
  };
  StateMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachine_descriptor_,
      StateMachine::default_instance_,
      StateMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachine));
  StateMachine_Transition_descriptor_ = StateMachine_descriptor_->nested_type(0);
  static const int StateMachine_Transition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_Transition, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_Transition, nextstate_),
  };
  StateMachine_Transition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachine_Transition_descriptor_,
      StateMachine_Transition::default_instance_,
      StateMachine_Transition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_Transition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_Transition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachine_Transition));
  StateMachine_State_descriptor_ = StateMachine_descriptor_->nested_type(1);
  static const int StateMachine_State_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_State, transitionvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_State, isacceptancestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_State, stateid_),
  };
  StateMachine_State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachine_State_descriptor_,
      StateMachine_State::default_instance_,
      StateMachine_State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine_State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachine_State));
  SecretKey_descriptor_ = file->message_type(2);
  static const int SecretKey_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_t_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_t_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_t_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_for_q_x_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_for_q_x_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_start1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, k_start2_),
  };
  SecretKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretKey_descriptor_,
      SecretKey::default_instance_,
      SecretKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretKey));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StateMachineAndKey_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bond_descriptor_, &Bond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachine_descriptor_, &StateMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachine_Transition_descriptor_, &StateMachine_Transition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachine_State_descriptor_, &StateMachine_State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretKey_descriptor_, &SecretKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StateMachineAndKey_2eproto() {
  delete Bond::default_instance_;
  delete Bond_reflection_;
  delete StateMachine::default_instance_;
  delete StateMachine_reflection_;
  delete StateMachine_Transition::default_instance_;
  delete StateMachine_Transition_reflection_;
  delete StateMachine_State::default_instance_;
  delete StateMachine_State_reflection_;
  delete SecretKey::default_instance_;
  delete SecretKey_reflection_;
}

void protobuf_AddDesc_StateMachineAndKey_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030StateMachineAndKey.proto\022\022StateMachine"
    "AndKey\"\207\001\n\004Bond\022\r\n\005c_i_1\030\001 \003(\014\022\r\n\005c_i_2\030"
    "\002 \003(\014\022\n\n\002Cm\030\003 \002(\014\022\020\n\010C_start1\030\004 \002(\014\022\020\n\010C"
    "_start2\030\005 \002(\014\022\016\n\006C_end1\030\006 \002(\014\022\016\n\006C_end2\030"
    "\007 \002(\014\022\021\n\tl_numOfCs\030\010 \001(\005\"\200\002\n\014StateMachin"
    "e\0228\n\010StateVec\030\001 \003(\0132&.StateMachineAndKey"
    ".StateMachine.State\022\r\n\005virus\030\002 \001(\t\032.\n\nTr"
    "ansition\022\r\n\005input\030\001 \002(\005\022\021\n\tnextState\030\002 \002"
    "(\005\032w\n\005State\022B\n\rtransitionVec\030\001 \003(\0132+.Sta"
    "teMachineAndKey.StateMachine.Transition\022"
    "\031\n\021isAcceptanceState\030\002 \002(\010\022\017\n\007stateID\030\003 "
    "\002(\005\"\206\001\n\tSecretKey\022\r\n\005K_t_1\030\001 \003(\014\022\r\n\005K_t_"
    "2\030\002 \003(\014\022\r\n\005K_t_3\030\003 \003(\014\022\023\n\013K_for_q_x_1\030\004 "
    "\003(\014\022\023\n\013K_for_q_x_2\030\005 \003(\014\022\020\n\010K_start1\030\006 \002"
    "(\014\022\020\n\010K_start2\030\007 \002(\014", 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StateMachineAndKey.proto", &protobuf_RegisterTypes);
  Bond::default_instance_ = new Bond();
  StateMachine::default_instance_ = new StateMachine();
  StateMachine_Transition::default_instance_ = new StateMachine_Transition();
  StateMachine_State::default_instance_ = new StateMachine_State();
  SecretKey::default_instance_ = new SecretKey();
  Bond::default_instance_->InitAsDefaultInstance();
  StateMachine::default_instance_->InitAsDefaultInstance();
  StateMachine_Transition::default_instance_->InitAsDefaultInstance();
  StateMachine_State::default_instance_->InitAsDefaultInstance();
  SecretKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StateMachineAndKey_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StateMachineAndKey_2eproto {
  StaticDescriptorInitializer_StateMachineAndKey_2eproto() {
    protobuf_AddDesc_StateMachineAndKey_2eproto();
  }
} static_descriptor_initializer_StateMachineAndKey_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Bond::kCI1FieldNumber;
const int Bond::kCI2FieldNumber;
const int Bond::kCmFieldNumber;
const int Bond::kCStart1FieldNumber;
const int Bond::kCStart2FieldNumber;
const int Bond::kCEnd1FieldNumber;
const int Bond::kCEnd2FieldNumber;
const int Bond::kLNumOfCsFieldNumber;
#endif  // !_MSC_VER

Bond::Bond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bond::InitAsDefaultInstance() {
}

Bond::Bond(const Bond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bond::SharedCtor() {
  _cached_size_ = 0;
  cm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  c_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  c_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  c_end1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  c_end2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  l_numofcs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bond::~Bond() {
  SharedDtor();
}

void Bond::SharedDtor() {
  if (cm_ != &::google::protobuf::internal::kEmptyString) {
    delete cm_;
  }
  if (c_start1_ != &::google::protobuf::internal::kEmptyString) {
    delete c_start1_;
  }
  if (c_start2_ != &::google::protobuf::internal::kEmptyString) {
    delete c_start2_;
  }
  if (c_end1_ != &::google::protobuf::internal::kEmptyString) {
    delete c_end1_;
  }
  if (c_end2_ != &::google::protobuf::internal::kEmptyString) {
    delete c_end2_;
  }
  if (this != default_instance_) {
  }
}

void Bond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bond_descriptor_;
}

const Bond& Bond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachineAndKey_2eproto();
  return *default_instance_;
}

Bond* Bond::default_instance_ = NULL;

Bond* Bond::New() const {
  return new Bond;
}

void Bond::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_cm()) {
      if (cm_ != &::google::protobuf::internal::kEmptyString) {
        cm_->clear();
      }
    }
    if (has_c_start1()) {
      if (c_start1_ != &::google::protobuf::internal::kEmptyString) {
        c_start1_->clear();
      }
    }
    if (has_c_start2()) {
      if (c_start2_ != &::google::protobuf::internal::kEmptyString) {
        c_start2_->clear();
      }
    }
    if (has_c_end1()) {
      if (c_end1_ != &::google::protobuf::internal::kEmptyString) {
        c_end1_->clear();
      }
    }
    if (has_c_end2()) {
      if (c_end2_ != &::google::protobuf::internal::kEmptyString) {
        c_end2_->clear();
      }
    }
    l_numofcs_ = 0;
  }
  c_i_1_.Clear();
  c_i_2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes c_i_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c_i_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_c_i_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_c_i_1;
        if (input->ExpectTag(18)) goto parse_c_i_2;
        break;
      }

      // repeated bytes c_i_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c_i_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_c_i_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_c_i_2;
        if (input->ExpectTag(26)) goto parse_Cm;
        break;
      }

      // required bytes Cm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Cm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_C_start1;
        break;
      }

      // required bytes C_start1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_C_start1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_start1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_C_start2;
        break;
      }

      // required bytes C_start2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_C_start2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_start2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_C_end1;
        break;
      }

      // required bytes C_end1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_C_end1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_end1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_C_end2;
        break;
      }

      // required bytes C_end2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_C_end2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_end2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_l_numOfCs;
        break;
      }

      // optional int32 l_numOfCs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l_numOfCs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &l_numofcs_)));
          set_has_l_numofcs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes c_i_1 = 1;
  for (int i = 0; i < this->c_i_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->c_i_1(i), output);
  }

  // repeated bytes c_i_2 = 2;
  for (int i = 0; i < this->c_i_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->c_i_2(i), output);
  }

  // required bytes Cm = 3;
  if (has_cm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cm(), output);
  }

  // required bytes C_start1 = 4;
  if (has_c_start1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->c_start1(), output);
  }

  // required bytes C_start2 = 5;
  if (has_c_start2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->c_start2(), output);
  }

  // required bytes C_end1 = 6;
  if (has_c_end1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->c_end1(), output);
  }

  // required bytes C_end2 = 7;
  if (has_c_end2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->c_end2(), output);
  }

  // optional int32 l_numOfCs = 8;
  if (has_l_numofcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->l_numofcs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes c_i_1 = 1;
  for (int i = 0; i < this->c_i_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->c_i_1(i), target);
  }

  // repeated bytes c_i_2 = 2;
  for (int i = 0; i < this->c_i_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->c_i_2(i), target);
  }

  // required bytes Cm = 3;
  if (has_cm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cm(), target);
  }

  // required bytes C_start1 = 4;
  if (has_c_start1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->c_start1(), target);
  }

  // required bytes C_start2 = 5;
  if (has_c_start2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->c_start2(), target);
  }

  // required bytes C_end1 = 6;
  if (has_c_end1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->c_end1(), target);
  }

  // required bytes C_end2 = 7;
  if (has_c_end2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->c_end2(), target);
  }

  // optional int32 l_numOfCs = 8;
  if (has_l_numofcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->l_numofcs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required bytes Cm = 3;
    if (has_cm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cm());
    }

    // required bytes C_start1 = 4;
    if (has_c_start1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_start1());
    }

    // required bytes C_start2 = 5;
    if (has_c_start2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_start2());
    }

    // required bytes C_end1 = 6;
    if (has_c_end1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_end1());
    }

    // required bytes C_end2 = 7;
    if (has_c_end2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->c_end2());
    }

    // optional int32 l_numOfCs = 8;
    if (has_l_numofcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->l_numofcs());
    }

  }
  // repeated bytes c_i_1 = 1;
  total_size += 1 * this->c_i_1_size();
  for (int i = 0; i < this->c_i_1_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->c_i_1(i));
  }

  // repeated bytes c_i_2 = 2;
  total_size += 1 * this->c_i_2_size();
  for (int i = 0; i < this->c_i_2_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->c_i_2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bond::MergeFrom(const Bond& from) {
  GOOGLE_CHECK_NE(&from, this);
  c_i_1_.MergeFrom(from.c_i_1_);
  c_i_2_.MergeFrom(from.c_i_2_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_cm()) {
      set_cm(from.cm());
    }
    if (from.has_c_start1()) {
      set_c_start1(from.c_start1());
    }
    if (from.has_c_start2()) {
      set_c_start2(from.c_start2());
    }
    if (from.has_c_end1()) {
      set_c_end1(from.c_end1());
    }
    if (from.has_c_end2()) {
      set_c_end2(from.c_end2());
    }
    if (from.has_l_numofcs()) {
      set_l_numofcs(from.l_numofcs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bond::CopyFrom(const Bond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bond::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007c) != 0x0000007c) return false;

  return true;
}

void Bond::Swap(Bond* other) {
  if (other != this) {
    c_i_1_.Swap(&other->c_i_1_);
    c_i_2_.Swap(&other->c_i_2_);
    std::swap(cm_, other->cm_);
    std::swap(c_start1_, other->c_start1_);
    std::swap(c_start2_, other->c_start2_);
    std::swap(c_end1_, other->c_end1_);
    std::swap(c_end2_, other->c_end2_);
    std::swap(l_numofcs_, other->l_numofcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bond_descriptor_;
  metadata.reflection = Bond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateMachine_Transition::kInputFieldNumber;
const int StateMachine_Transition::kNextStateFieldNumber;
#endif  // !_MSC_VER

StateMachine_Transition::StateMachine_Transition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateMachine_Transition::InitAsDefaultInstance() {
}

StateMachine_Transition::StateMachine_Transition(const StateMachine_Transition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateMachine_Transition::SharedCtor() {
  _cached_size_ = 0;
  input_ = 0;
  nextstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachine_Transition::~StateMachine_Transition() {
  SharedDtor();
}

void StateMachine_Transition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateMachine_Transition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachine_Transition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachine_Transition_descriptor_;
}

const StateMachine_Transition& StateMachine_Transition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachineAndKey_2eproto();
  return *default_instance_;
}

StateMachine_Transition* StateMachine_Transition::default_instance_ = NULL;

StateMachine_Transition* StateMachine_Transition::New() const {
  return new StateMachine_Transition;
}

void StateMachine_Transition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    input_ = 0;
    nextstate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachine_Transition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_)));
          set_has_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nextState;
        break;
      }

      // required int32 nextState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextstate_)));
          set_has_nextstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateMachine_Transition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->input(), output);
  }

  // required int32 nextState = 2;
  if (has_nextstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateMachine_Transition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->input(), target);
  }

  // required int32 nextState = 2;
  if (has_nextstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateMachine_Transition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input());
    }

    // required int32 nextState = 2;
    if (has_nextstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachine_Transition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachine_Transition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachine_Transition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachine_Transition::MergeFrom(const StateMachine_Transition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_nextstate()) {
      set_nextstate(from.nextstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachine_Transition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachine_Transition::CopyFrom(const StateMachine_Transition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachine_Transition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StateMachine_Transition::Swap(StateMachine_Transition* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(nextstate_, other->nextstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachine_Transition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachine_Transition_descriptor_;
  metadata.reflection = StateMachine_Transition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StateMachine_State::kTransitionVecFieldNumber;
const int StateMachine_State::kIsAcceptanceStateFieldNumber;
const int StateMachine_State::kStateIDFieldNumber;
#endif  // !_MSC_VER

StateMachine_State::StateMachine_State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateMachine_State::InitAsDefaultInstance() {
}

StateMachine_State::StateMachine_State(const StateMachine_State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateMachine_State::SharedCtor() {
  _cached_size_ = 0;
  isacceptancestate_ = false;
  stateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachine_State::~StateMachine_State() {
  SharedDtor();
}

void StateMachine_State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateMachine_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachine_State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachine_State_descriptor_;
}

const StateMachine_State& StateMachine_State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachineAndKey_2eproto();
  return *default_instance_;
}

StateMachine_State* StateMachine_State::default_instance_ = NULL;

StateMachine_State* StateMachine_State::New() const {
  return new StateMachine_State;
}

void StateMachine_State::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isacceptancestate_ = false;
    stateid_ = 0;
  }
  transitionvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachine_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StateMachineAndKey.StateMachine.Transition transitionVec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transitionVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transitionvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_transitionVec;
        if (input->ExpectTag(16)) goto parse_isAcceptanceState;
        break;
      }

      // required bool isAcceptanceState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAcceptanceState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isacceptancestate_)));
          set_has_isacceptancestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stateID;
        break;
      }

      // required int32 stateID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateid_)));
          set_has_stateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateMachine_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .StateMachineAndKey.StateMachine.Transition transitionVec = 1;
  for (int i = 0; i < this->transitionvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transitionvec(i), output);
  }

  // required bool isAcceptanceState = 2;
  if (has_isacceptancestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isacceptancestate(), output);
  }

  // required int32 stateID = 3;
  if (has_stateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateMachine_State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .StateMachineAndKey.StateMachine.Transition transitionVec = 1;
  for (int i = 0; i < this->transitionvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transitionvec(i), target);
  }

  // required bool isAcceptanceState = 2;
  if (has_isacceptancestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isacceptancestate(), target);
  }

  // required int32 stateID = 3;
  if (has_stateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateMachine_State::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool isAcceptanceState = 2;
    if (has_isacceptancestate()) {
      total_size += 1 + 1;
    }

    // required int32 stateID = 3;
    if (has_stateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateid());
    }

  }
  // repeated .StateMachineAndKey.StateMachine.Transition transitionVec = 1;
  total_size += 1 * this->transitionvec_size();
  for (int i = 0; i < this->transitionvec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transitionvec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachine_State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachine_State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachine_State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachine_State::MergeFrom(const StateMachine_State& from) {
  GOOGLE_CHECK_NE(&from, this);
  transitionvec_.MergeFrom(from.transitionvec_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isacceptancestate()) {
      set_isacceptancestate(from.isacceptancestate());
    }
    if (from.has_stateid()) {
      set_stateid(from.stateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachine_State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachine_State::CopyFrom(const StateMachine_State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachine_State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < transitionvec_size(); i++) {
    if (!this->transitionvec(i).IsInitialized()) return false;
  }
  return true;
}

void StateMachine_State::Swap(StateMachine_State* other) {
  if (other != this) {
    transitionvec_.Swap(&other->transitionvec_);
    std::swap(isacceptancestate_, other->isacceptancestate_);
    std::swap(stateid_, other->stateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachine_State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachine_State_descriptor_;
  metadata.reflection = StateMachine_State_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StateMachine::kStateVecFieldNumber;
const int StateMachine::kVirusFieldNumber;
#endif  // !_MSC_VER

StateMachine::StateMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateMachine::InitAsDefaultInstance() {
}

StateMachine::StateMachine(const StateMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateMachine::SharedCtor() {
  _cached_size_ = 0;
  virus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachine::~StateMachine() {
  SharedDtor();
}

void StateMachine::SharedDtor() {
  if (virus_ != &::google::protobuf::internal::kEmptyString) {
    delete virus_;
  }
  if (this != default_instance_) {
  }
}

void StateMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachine_descriptor_;
}

const StateMachine& StateMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachineAndKey_2eproto();
  return *default_instance_;
}

StateMachine* StateMachine::default_instance_ = NULL;

StateMachine* StateMachine::New() const {
  return new StateMachine;
}

void StateMachine::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_virus()) {
      if (virus_ != &::google::protobuf::internal::kEmptyString) {
        virus_->clear();
      }
    }
  }
  statevec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StateMachineAndKey.StateMachine.State StateVec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StateVec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statevec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_StateVec;
        if (input->ExpectTag(18)) goto parse_virus;
        break;
      }

      // optional string virus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virus().data(), this->virus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .StateMachineAndKey.StateMachine.State StateVec = 1;
  for (int i = 0; i < this->statevec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statevec(i), output);
  }

  // optional string virus = 2;
  if (has_virus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virus().data(), this->virus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->virus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .StateMachineAndKey.StateMachine.State StateVec = 1;
  for (int i = 0; i < this->statevec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statevec(i), target);
  }

  // optional string virus = 2;
  if (has_virus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virus().data(), this->virus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->virus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string virus = 2;
    if (has_virus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virus());
    }

  }
  // repeated .StateMachineAndKey.StateMachine.State StateVec = 1;
  total_size += 1 * this->statevec_size();
  for (int i = 0; i < this->statevec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statevec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachine::MergeFrom(const StateMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  statevec_.MergeFrom(from.statevec_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_virus()) {
      set_virus(from.virus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachine::CopyFrom(const StateMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachine::IsInitialized() const {

  for (int i = 0; i < statevec_size(); i++) {
    if (!this->statevec(i).IsInitialized()) return false;
  }
  return true;
}

void StateMachine::Swap(StateMachine* other) {
  if (other != this) {
    statevec_.Swap(&other->statevec_);
    std::swap(virus_, other->virus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachine_descriptor_;
  metadata.reflection = StateMachine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecretKey::kKT1FieldNumber;
const int SecretKey::kKT2FieldNumber;
const int SecretKey::kKT3FieldNumber;
const int SecretKey::kKForQX1FieldNumber;
const int SecretKey::kKForQX2FieldNumber;
const int SecretKey::kKStart1FieldNumber;
const int SecretKey::kKStart2FieldNumber;
#endif  // !_MSC_VER

SecretKey::SecretKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecretKey::InitAsDefaultInstance() {
}

SecretKey::SecretKey(const SecretKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecretKey::SharedCtor() {
  _cached_size_ = 0;
  k_start1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  k_start2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretKey::~SecretKey() {
  SharedDtor();
}

void SecretKey::SharedDtor() {
  if (k_start1_ != &::google::protobuf::internal::kEmptyString) {
    delete k_start1_;
  }
  if (k_start2_ != &::google::protobuf::internal::kEmptyString) {
    delete k_start2_;
  }
  if (this != default_instance_) {
  }
}

void SecretKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretKey_descriptor_;
}

const SecretKey& SecretKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachineAndKey_2eproto();
  return *default_instance_;
}

SecretKey* SecretKey::default_instance_ = NULL;

SecretKey* SecretKey::New() const {
  return new SecretKey;
}

void SecretKey::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (has_k_start1()) {
      if (k_start1_ != &::google::protobuf::internal::kEmptyString) {
        k_start1_->clear();
      }
    }
    if (has_k_start2()) {
      if (k_start2_ != &::google::protobuf::internal::kEmptyString) {
        k_start2_->clear();
      }
    }
  }
  k_t_1_.Clear();
  k_t_2_.Clear();
  k_t_3_.Clear();
  k_for_q_x_1_.Clear();
  k_for_q_x_2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes K_t_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_t_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_k_t_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_K_t_1;
        if (input->ExpectTag(18)) goto parse_K_t_2;
        break;
      }

      // repeated bytes K_t_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_t_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_k_t_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_K_t_2;
        if (input->ExpectTag(26)) goto parse_K_t_3;
        break;
      }

      // repeated bytes K_t_3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_t_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_k_t_3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_K_t_3;
        if (input->ExpectTag(34)) goto parse_K_for_q_x_1;
        break;
      }

      // repeated bytes K_for_q_x_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_for_q_x_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_k_for_q_x_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_K_for_q_x_1;
        if (input->ExpectTag(42)) goto parse_K_for_q_x_2;
        break;
      }

      // repeated bytes K_for_q_x_2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_for_q_x_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_k_for_q_x_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_K_for_q_x_2;
        if (input->ExpectTag(50)) goto parse_K_start1;
        break;
      }

      // required bytes K_start1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_start1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k_start1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_K_start2;
        break;
      }

      // required bytes K_start2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_K_start2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_k_start2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecretKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes K_t_1 = 1;
  for (int i = 0; i < this->k_t_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->k_t_1(i), output);
  }

  // repeated bytes K_t_2 = 2;
  for (int i = 0; i < this->k_t_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->k_t_2(i), output);
  }

  // repeated bytes K_t_3 = 3;
  for (int i = 0; i < this->k_t_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->k_t_3(i), output);
  }

  // repeated bytes K_for_q_x_1 = 4;
  for (int i = 0; i < this->k_for_q_x_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->k_for_q_x_1(i), output);
  }

  // repeated bytes K_for_q_x_2 = 5;
  for (int i = 0; i < this->k_for_q_x_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->k_for_q_x_2(i), output);
  }

  // required bytes K_start1 = 6;
  if (has_k_start1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->k_start1(), output);
  }

  // required bytes K_start2 = 7;
  if (has_k_start2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->k_start2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecretKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes K_t_1 = 1;
  for (int i = 0; i < this->k_t_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->k_t_1(i), target);
  }

  // repeated bytes K_t_2 = 2;
  for (int i = 0; i < this->k_t_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->k_t_2(i), target);
  }

  // repeated bytes K_t_3 = 3;
  for (int i = 0; i < this->k_t_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->k_t_3(i), target);
  }

  // repeated bytes K_for_q_x_1 = 4;
  for (int i = 0; i < this->k_for_q_x_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->k_for_q_x_1(i), target);
  }

  // repeated bytes K_for_q_x_2 = 5;
  for (int i = 0; i < this->k_for_q_x_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->k_for_q_x_2(i), target);
  }

  // required bytes K_start1 = 6;
  if (has_k_start1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->k_start1(), target);
  }

  // required bytes K_start2 = 7;
  if (has_k_start2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->k_start2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecretKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // required bytes K_start1 = 6;
    if (has_k_start1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->k_start1());
    }

    // required bytes K_start2 = 7;
    if (has_k_start2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->k_start2());
    }

  }
  // repeated bytes K_t_1 = 1;
  total_size += 1 * this->k_t_1_size();
  for (int i = 0; i < this->k_t_1_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->k_t_1(i));
  }

  // repeated bytes K_t_2 = 2;
  total_size += 1 * this->k_t_2_size();
  for (int i = 0; i < this->k_t_2_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->k_t_2(i));
  }

  // repeated bytes K_t_3 = 3;
  total_size += 1 * this->k_t_3_size();
  for (int i = 0; i < this->k_t_3_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->k_t_3(i));
  }

  // repeated bytes K_for_q_x_1 = 4;
  total_size += 1 * this->k_for_q_x_1_size();
  for (int i = 0; i < this->k_for_q_x_1_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->k_for_q_x_1(i));
  }

  // repeated bytes K_for_q_x_2 = 5;
  total_size += 1 * this->k_for_q_x_2_size();
  for (int i = 0; i < this->k_for_q_x_2_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->k_for_q_x_2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretKey::MergeFrom(const SecretKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  k_t_1_.MergeFrom(from.k_t_1_);
  k_t_2_.MergeFrom(from.k_t_2_);
  k_t_3_.MergeFrom(from.k_t_3_);
  k_for_q_x_1_.MergeFrom(from.k_for_q_x_1_);
  k_for_q_x_2_.MergeFrom(from.k_for_q_x_2_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_k_start1()) {
      set_k_start1(from.k_start1());
    }
    if (from.has_k_start2()) {
      set_k_start2(from.k_start2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretKey::CopyFrom(const SecretKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000060) != 0x00000060) return false;

  return true;
}

void SecretKey::Swap(SecretKey* other) {
  if (other != this) {
    k_t_1_.Swap(&other->k_t_1_);
    k_t_2_.Swap(&other->k_t_2_);
    k_t_3_.Swap(&other->k_t_3_);
    k_for_q_x_1_.Swap(&other->k_for_q_x_1_);
    k_for_q_x_2_.Swap(&other->k_for_q_x_2_);
    std::swap(k_start1_, other->k_start1_);
    std::swap(k_start2_, other->k_start2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretKey_descriptor_;
  metadata.reflection = SecretKey_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StateMachineAndKey

// @@protoc_insertion_point(global_scope)
