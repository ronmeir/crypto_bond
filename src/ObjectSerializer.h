/*
   ____  _     _           _    _____           _       _ _
  / __ \| |   (_)         | |  / ____|         (_)     | (_)
 | |  | | |__  _  ___  ___| |_| (___   ___ _ __ _  __ _| |_ _______ _ __
 | |  | | '_ \| |/ _ \/ __| __|\___ \ / _ \ '__| |/ _` | | |_  / _ \ '__|
 | |__| | |_) | |  __/ (__| |_ ____) |  __/ |  | | (_| | | |/ /  __/ |
  \____/|_.__/| |\___|\___|\__|_____/ \___|_|  |_|\__,_|_|_/___\___|_|
             _/ |
            |__/
 *
 * Since we have to send various objects over an IP connection, they had to be serialized
 * by the sender and de-serialized by the receiver.
 * This class performs serialization and de-serialization of objects of the following classes:
 * 1. SK
 * 2. BOND
 * 3. State Machine
 * It uses the StateMachineAndKey class (which is generated using google's protobuff lib)
 * to perform the low level serialization and de-serialization.
 */

#ifndef OBJECTSERIALIZER_H_
#define OBJECTSERIALIZER_H_
#include <vector>
#include <string>
#include "Transition3Tuple.h"
#include "StateMachine.h"
#include "EncryptionHandler.h"
#include "StateMachineAndKey.pb.h"

class ObjectSerializer {
private:
	//members:
	//the following members are of classes that were generated by the Protocol-Buffer
	StateMachineAndKey::Bond m_Bond;
	StateMachineAndKey::StateMachine m_Machine;
	StateMachineAndKey::SecretKey m_SK;
	//not related to the protocol-buffer:
	BilinearMappingHandler* m_mapper;
	bool m_isStateMachineSet, m_isSecretKeySet, m_isBondSet;


	//methods:
private:
	void setSingleState(StateMachineAndKey::StateMachine_State* state,
								StateMachine& SM, const std::vector<Transition3Tuple>*,int);

public:
	ObjectSerializer(BilinearMappingHandler&);
	virtual ~ObjectSerializer();
	void setStateMachine (StateMachine& SM, std::string optionalVirusString);
	void setSecretKey (EncryptionHandler::SK& SK, StateMachine& );
	void setBond (EncryptionHandler::CT& CT);
	void setBondInPlainText (memberElement& bond, bool isMemberOfGT);
	void clearBondInPlainText ();
	void getSerializedStateMachineString(std::string&);
	void getSerializedSecretKeyString(std::string&);
	void getSerializedBondString(std::string&);
	int  getNumOfStatesInStateMachineFromSerialized (std::string SM_string);
	void deserializeStateMachine (StateMachine& saveHere,std::string* saveVirusHere, std::string SM_string);
	void deserializeSecretKey (EncryptionHandler::SK& saveHere,std::string SK_string);
	void deserializeBond (EncryptionHandler::CT& saveHere, std::string bond_string);
	bool hasBondInPlainText();
	bool getBondInPlainText (memberElement& saveHere, bool isMemberOfGT);
};

#endif /* OBJECTSERIALIZER_H_ */
